doctype html
meta(charset='utf-8')
title Acidentes nas Rodovias Federais
link(rel='stylesheet', href='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css')
link(href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/MarkerCluster.css', rel='stylesheet')
link(rel='stylesheet', href='/stylesheets/clusterpies.css')
script(src='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js', charset='utf-8')
script(src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js')
script(src='http://d3js.org/d3.v3.min.js', charset='utf-8')
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
#map
    script.
        var myData = !{JSON.stringify(jsonData)};
        "use strict"
        //console.log(myData);
        var occurrence = function (array) {
            var result = {};
            if (array instanceof Array) { // Check if input is array.
                array.forEach(function (v, i) {
                    if (!result[v]) { // Initial object property creation.
                        result[v] = [i]; // Create an array for that property.
                    } else { // Same occurrences found.
                        result[v].push(i); // Fill the array.
                    }
                });
            }
            return result;
        };
        var previousBackgroundColorWeekDay;
        var previousBackgroundPositionWeekDay;
        var previousBackgroundPositionYears;
        var previousBackgroundColorCauses;
        var previousBackgroundPositionCauses;
        var previousBackgroundColorHours;
        var previousBackgroundPositionHours;
        var previousBackgroundColorBrs;
        var previousBackgroundPositionBrs;
        var previousBackgroundColorClass;
        var previousBackgroundPositionClass;
        var geojson,
            metadata,
            geojsonPath = 'exemploFiltro.geojson',
            propertiesPath = 'properties.json',
            categoryField = 'f3', //This is the fieldname for marker category (used in the pie and legend)
            iconField = '5065', //This is the fieldame for marker icon
            popupFields = ['5065','f2','f3'], //Popup will display these fields
            tileServer = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            tileAttribution = 'Map data: <a href="http://openstreetmap.org">OSM</a>',
            rmax = 30, //Maximum radius for cluster pies
            markerclusters = L.markerClusterGroup({
                maxClusterRadius: 2*rmax,
                chunkedLoading: true,
                chunkInterval: 200, // process markers for a maximum of ~ n milliseconds (then trigger the chunkProgress callback)
                chunkDelay: 50, // at the end of each interval, give n milliseconds back to system/browser
                chunkProgress: null, // progress callback: function(processed, total, elapsed) (e.g. for a progress indicator)'
                iconCreateFunction: defineClusterIcon //this is where the magic happens
                // When bulk adding layers, adds markers in chunks. Means addLayers may not add all the layers in the call, others will be loaded during setTimeouts
            }),
            map = L.map('map').setView([59.95, 10.78], 8);
        //Add basemap
        L.tileLayer(tileServer, {attribution: tileAttribution,  maxZoom: 15}).addTo(map);
        //and the empty markercluster layer
        map.addLayer(markerclusters);

        //Ready to go, load the properties of geojson
        d3.json(propertiesPath, function(error, data) {
            if (!error) {
                metadata = data.properties;
                console.log(metadata);
            } else {
                console.log('Could not load metadata...');
            }
        });

        //Ready to go, load the geojson
        d3.json(geojsonPath, function(error, data) {
            if (!error) {
                geojson = myData; //We now actually just pass the json variable
                //metadata = data.properties;
                //console.log(metadata);
                var markers = L.geoJson(geojson, {
                    pointToLayer: defineFeature,
                    onEachFeature: defineFeaturePopup
                });
                markerclusters.addLayer(markers);
                map.fitBounds(markers.getBounds());
                //map.attributionControl.addAttribution(metadata.attribution);
                renderLegend();
            } else {
                console.log('Could not load data...');
            }
        });

        function defineFeature(feature, latlng) {
            var categoryVal = feature.properties[categoryField],
                iconVal = feature.properties["4"];
            var myClass = 'marker category-'+categoryVal+' icon-'+iconVal;
            var myIcon = L.divIcon({
                className: myClass,
                iconSize:null
            });
            return L.marker(latlng, {icon: myIcon});
        }

        function defineFeaturePopup(feature, layer) {
            var props = feature.properties,
                fields = metadata.fields,

                //here we get the lat, lng to use it on a Maps link
                lat = feature.geometry.coordinates[1];
                lng = feature.geometry.coordinates[0];
                popupContent = '<a href="https://www.google.com/maps/search/?api=1&query='+lat+','+lng+' " target="_blank">Acessar no Maps</a>';
            popupFields.map( function(key) {
                if (props[key]) {
                    var val = props[key],
                        label = fields[key].name;
                    if (fields[key].lookup) {
                        val = fields[key].lookup[val];
                    }
                    popupContent += '<span class="attribute"><span class="label">'+label+':</span> '+val+'</span>';
                }
            });
            popupContent = '<div class="map-popup">'+popupContent+'</div>';
            layer.bindPopup(popupContent,{offset: L.point(1,-2)});
        }

        function defineClusterIcon(cluster) {
            var children = cluster.getAllChildMarkers(),
                n = children.length, //Get number of markers in cluster
                strokeWidth = 1, //Set clusterpie stroke width
                r = rmax-2*strokeWidth-(n<10?12:n<100?8:n<1000?4:0), //Calculate clusterpie radius...
                iconDim = (r+strokeWidth)*2, //...and divIcon dimensions (leaflet really want to know the size)
                data = d3.nest() //Build a dataset for the pie chart
                    .key(function(d) { return d.feature.properties[categoryField]; })
                    .entries(children, d3.map),
                //bake some svg markup
                html = bakeThePie({data: data,
                    valueFunc: function(d){return d.values.length;},
                    strokeWidth: 1,
                    outerRadius: r,
                    innerRadius: r-10,
                    pieClass: 'cluster-pie',
                    pieLabel: n,
                    pieLabelClass: 'marker-cluster-pie-label',
                    pathClassFunc: function(d){return "category-"+d.data.key;},
                    pathTitleFunc: function(d){return metadata.fields[categoryField].lookup[d.data.key]+' ('+d.data.values.length+' accident'+(d.data.values.length!=1?'s':'')+')';}
                }),
                //Create a new divIcon and assign the svg markup to the html property
                myIcon = new L.DivIcon({
                    html: html,
                    className: 'marker-cluster',
                    iconSize: new L.Point(iconDim, iconDim)
                });
            return myIcon;
        }
        /*function that generates a svg markup for the pie chart*/
        function bakeThePie(options) {
            /*data and valueFunc are required*/
            if (!options.data || !options.valueFunc) {
                return '';
            }
            var data = options.data,
                valueFunc = options.valueFunc,
                r = options.outerRadius?options.outerRadius:28, //Default outer radius = 28px
                rInner = options.innerRadius?options.innerRadius:r-10, //Default inner radius = r-10
                strokeWidth = options.strokeWidth?options.strokeWidth:1, //Default stroke is 1
                pathClassFunc = options.pathClassFunc?options.pathClassFunc:function(){return '';}, //Class for each path
                pathTitleFunc = options.pathTitleFunc?options.pathTitleFunc:function(){return '';}, //Title for each path
                pieClass = options.pieClass?options.pieClass:'marker-cluster-pie', //Class for the whole pie
                pieLabel = options.pieLabel?options.pieLabel:d3.sum(data,valueFunc), //Label for the whole pie
                pieLabelClass = options.pieLabelClass?options.pieLabelClass:'marker-cluster-pie-label',//Class for the pie label
                origo = (r+strokeWidth), //Center coordinate
                w = origo*2, //width and height of the svg element
                h = w,
                donut = d3.layout.pie(),
                arc = d3.svg.arc().innerRadius(rInner).outerRadius(r);
            //Create an svg element
            var svg = document.createElementNS(d3.ns.prefix.svg, 'svg');
            //Create the pie chart
            var vis = d3.select(svg)
                .data([data])
                .attr('class', pieClass)
                .attr('width', w)
                .attr('height', h);
            var arcs = vis.selectAll('g.arc')
                .data(donut.value(valueFunc))
                .enter().append('svg:g')
                .attr('class', 'arc')
                .attr('transform', 'translate(' + origo + ',' + origo + ')');
            arcs.append('svg:path')
                .attr('class', pathClassFunc)
                .attr('stroke-width', strokeWidth)
                .attr('d', arc)
                .append('svg:title')
                .text(pathTitleFunc);
            vis.append('text')
                .attr('x',origo)
                .attr('y',origo)
                .attr('class', pieLabelClass)
                .attr('text-anchor', 'middle')
                //.attr('dominant-baseline', 'central')
                /*IE doesn't seem to support dominant-baseline, but setting dy to .3em does the trick*/
                .attr('dy','.3em')
                .text(pieLabel);
            //Return the svg-markup rather than the actual element
            return serializeXmlNode(svg);
        }
        /*Function for generating a legend with the same categories as in the clusterPie*/
        function renderLegend() {
            var data = d3.entries(metadata.fields[categoryField].lookup),
                legenddiv = d3.select('body').append('div')
                    .attr('id','legend');
            var heading = legenddiv.append('div')
                .classed('legendheading', true)
                .text(metadata.fields[categoryField].name);
            var legenditems = legenddiv.selectAll('.legenditem')
                .data(data);
            legenditems
                .enter()
                .append('div')
                .attr('class',function(d){return 'category-'+d.key;})
                .classed({'legenditem': true})
                .text(function(d){return d.value;});
        }
        /*Helper function*/
        function serializeXmlNode(xmlNode) {
            if (typeof window.XMLSerializer != "undefined") {
                return (new window.XMLSerializer()).serializeToString(xmlNode);
            } else if (typeof xmlNode.xml != "undefined") {
                return xmlNode.xml;
            }
            return "";
        }
#container
    form(name='weekDayForm' action='/filter')
        select(name='weekDay' id='weekDay' hidden)
            option(disabled='', selected='', value='') Dia da semana
            option(value='Segunda') Segunda
            option(value='Terça') Terça
            option(value='Quarta') Quarta
            option(value='Quinta') Quinta
            option(value='Sexta') Sexta
            option(value='Sábado') Sábado
            option(value='Domingo') Domingo
        select(name='yearAccident' id='yearAccident' hidden)
            option(disabled='', selected='', value='') Ano
            option(value='2007') 2007
            option(value='2008') 2008
            option(value='2009') 2009
            option(value='2010') 2010
            option(value='2011') 2011
            option(value='2012') 2012
            option(value='2013') 2013
            option(value='2014') 2014
            option(value='2015') 2015
            option(value='2016') 2016
            option(value='2017') 2017
            option(value='2018') 2018
        select(name='causesAccident' id='causesAccident' hidden)
            option(disabled='', selected='', value='') Causas
            option(value='0') 0
            option(value='1') 1
            option(value='2') 2
            option(value='3') 3
            option(value='4') 4
        select(name='hoursAccident' id='hoursAccident' hidden)
            option(disabled='', selected='', value='') Horarios
            option(value='0') 0
            option(value='1') 1
            option(value='2') 2
            option(value='3') 3
            option(value='4') 4
        select(name='brsAccident' id='brsAccident' hidden)
            option(disabled='', selected='', value='') Br's
        select(name='classAccident' id='classAccident' hidden)
            option(disabled='', selected='', value='') Ano
            option(value='3') 3
            option(value='5') 5
            option(value='1') 1
            option(value='1') 6
        input(type='submit', class="submitButton" value='Filtrar')
    #charts 
        #chartWeekDay
            canvas(id="bar-chart")
            script.
                var myData = !{JSON.stringify(jsonData)};
                var myDataFeatures = myData.features;
                var segunda = 0;
                var terca = 0;
                var quarta = 0;
                var quinta = 0;
                var sexta = 0;
                var sabado = 0;
                var domingo = 0;
                for(var i = 0; i < myDataFeatures.length; i++) {
                    var obj = myDataFeatures[i];

                    switch(obj.properties.f4) {
                        case "Segunda": {
                            segunda++;
                            break;
                        }
                        case "Terça": {
                            terca++;
                            break;
                        }
                        case "Quarta": {
                            quarta++;
                            break;
                        }
                        case "Quinta": {
                            quinta++;
                            break;
                        }
                        case "Sexta": {
                            sexta++;
                            break;
                        }
                        case "Sábado": {
                            sabado++;
                            break;
                        }
                        case "Domingo": {
                            domingo++;
                            break;
                        }
                    }
                }
                var bar_chart = new Chart(document.getElementById("bar-chart"), {
                    type: 'bar',
                    data: {
                    labels: ["Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo"],
                    datasets: [
                        {
                        label: "Quantidade de acidentes",
                        backgroundColor: ["#fdb94e", "#f9a852","#f69653","#f38654","#f07654", "#ed6856", "#ef5956"],
                        data: [segunda,terca,quarta,quinta,sexta, sabado, domingo]
                        }
                    ]
                    },
                    options: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Número de acidentes por dia da semana'
                        },
                        maintainAspectRatio: false,
                        onClick: weekChartClickEvent,
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                });
                function weekChartClickEvent(event, array){
                    var choosen = array[0]._view.label; //we have the name of bar clicked, use to filter
                    var element = document.getElementById("weekDay");
                    
                    if(element.value == choosen){ //If user selects a filter and diselects it we take off gray and diselect the filter
                        if(this.previousBackgroundColorWeekDay){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionWeekDay] = this.previousBackgroundColorWeekDay;
                             element.value = null;
                        }
                    }
                    else{
                        element.value = choosen;
                        var elementIndex = array[0]._index;
                        if(this.previousBackgroundColorWeekDay){
                          this.data.datasets[0].backgroundColor[this.previousBackgroundPositionWeekDay] = this.previousBackgroundColorWeekDay; //Swap old selected to previous color
                        }
                      this.previousBackgroundColorWeekDay = this.data.datasets[0].backgroundColor[elementIndex];
                      this.previousBackgroundPositionWeekDay = elementIndex;
                      this.data.datasets[0].backgroundColor[elementIndex] = 'gray';
                    }
                    this.update();
                }
        #chartYears
            canvas(id="mixed-chart")
            script.
                var myYears = !{JSON.stringify(yearsData)};
                var accidentsPerYear = myYears.rows;
                console.log(myYears);
                if(myYears.rowCount > 1){ //If not, it's only one year and we don't show it
                    var dataYears = [accidentsPerYear[0].count, accidentsPerYear[1].count, accidentsPerYear[2].count, accidentsPerYear[3].count, accidentsPerYear[4].count, accidentsPerYear[5].count,accidentsPerYear[6].count, accidentsPerYear[7].count, accidentsPerYear[8].count, accidentsPerYear[9].count, accidentsPerYear[10].count, accidentsPerYear[11].count];
                    var years = [accidentsPerYear[0].ano, accidentsPerYear[1].ano, accidentsPerYear[2].ano, accidentsPerYear[3].ano, accidentsPerYear[4].ano, accidentsPerYear[5].ano,accidentsPerYear[6].ano, accidentsPerYear[7].ano, accidentsPerYear[8].ano, accidentsPerYear[9].ano, accidentsPerYear[10].ano, accidentsPerYear[11].ano];
                }
                else{
                    const yearStarted = 2007;
                    var dataYears = new Array(11).fill(0);
                    var hasDataPos = accidentsPerYear[0].ano - yearStarted;
                    var years = ['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'];
                    dataYears[hasDataPos] = accidentsPerYear[0].count;
                }
                var line_chart = new Chart(document.getElementById("mixed-chart"), {
                    type: 'line',
                    data: {
                    labels: years,
                    datasets: [
                        {
                        label: "Quantidade de acidentes",
                        borderColor: "#3e95cd",
                        fill:false,
                        data: dataYears,
                        pointBackgroundColor: ["red", "red", "red", "red", "red", "red", "red", "red", "red", "red", "red", "red"]
                        }
                    ]
                    },
                    options: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Acidentes por ano'
                        },
                        maintainAspectRatio: false,
                        onClick: yearchartClickEvent,
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                });

                function yearchartClickEvent(event, array){
                    var choosen = years[array[0]._index]; //index have info of Year index on array
                    var element = document.getElementById("yearAccident");

                    console.log(element.value);
                    console.log(choosen);

                    if(element.value == choosen){ //If user selects a filter and diselects it we take off gray and diselect the filter
                        this.data.datasets[0].pointBackgroundColor[this.previousBackgroundPositionYears] = 'red';
                        element.value = null;
                    }

                    else{
                        element.value = choosen;

                        var elementIndex = array[0]._index;
                        if(this.previousBackgroundPositionYears){
                            this.data.datasets[0].pointBackgroundColor[this.previousBackgroundPositionYears] = 'red'; //Swap old selected to previous color
                        }
                        this.previousBackgroundPositionYears = elementIndex;
                        this.data.datasets[0].pointBackgroundColor[elementIndex] = 'gray'; 
                    }
                    this.update();
                }
        #chartCauses
            canvas(id="pie-chart")
            script.
                var causesAccidents = !{JSON.stringify(causesData)};                
                var causesCount = causesAccidents.rows;
                if(causesAccidents.rowCount > 1){
                    var backgroundColorCauses = ["#134249", "#1C5E68", "#278593", "#38938D", "#41ADA6","#AF4949","#FF6B6B", "#A89848", "#DDC85F", "#FFE66D"]; //Palette Causes
                    var labelsCauses = [causesCount[0].causa_acidente, causesCount[1].causa_acidente, causesCount[2].causa_acidente, causesCount[3].causa_acidente, causesCount[4].causa_acidente, causesCount[5].causa_acidente, causesCount[6].causa_acidente, causesCount[7].causa_acidente, causesCount[8].causa_acidente, causesCount[9].causa_acidente];
                    var dataCauses = [causesCount[0].count,causesCount[1].count,causesCount[2].count,causesCount[3].count,causesCount[4].count, causesCount[5].count,causesCount[6].count,causesCount[7].count,causesCount[8].count,causesCount[9].count];
                }
                else{
                    var backgroundColorCauses = ["#ef4947"];
                    var labelsCauses = [causesCount[0].causa_acidente];
                    var dataCauses = [causesCount[0].count];
                }
                var piechartCauses = new Chart(document.getElementById("pie-chart"), {
                    type: 'pie',
                    data: {
                    labels: labelsCauses,
                    datasets: [{
                        backgroundColor: backgroundColorCauses,
                        data: dataCauses
                    }]
                    },
                    options: {
                        onClick: causesClickEvent,
                    title: {
                        display: true,
                        text: 'Principais causas dos acidentes'
                    }
                    }
                });
                function causesClickEvent(event, array){
                    var choosen = array[0]._index;
                    var element = document.getElementById("causesAccident");

                    if(element.value == causesCount[choosen].causa_acidente){ //If user selects a filter and diselects it we take off gray and diselect the filter
                        if(this.previousBackgroundColorCauses){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionCauses] = this.previousBackgroundColorCauses;
                             element.value = null;
                        }
                    }
                    
                    else{
                        //Create new option for selected Cause
                        var opt = document.createElement('option');
                        opt.value = causesCount[choosen].causa_acidente;
                        opt.innerHTML = causesCount[choosen].causa_acidente;
                        element.appendChild(opt);
                        element.value = causesCount[choosen].causa_acidente;

                        var elementIndex = array[0]._index;
                        if(this.previousBackgroundColorCauses){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionCauses] = this.previousBackgroundColorCauses; //Swap old selected to previous color
                        }
                        this.previousBackgroundColorCauses = this.data.datasets[0].backgroundColor[elementIndex];
                        this.previousBackgroundPositionCauses = elementIndex;
                        this.data.datasets[0].backgroundColor[elementIndex] = 'gray';
                    }
                    this.update();
                }
        #chartHours
            canvas(id="bar-chart-horizontal")
            script.
                var hoursAccidents = !{JSON.stringify(hoursData)};               
                var hoursCount = hoursAccidents.rows;
                if(hoursAccidents.rowCount > 1){
                    var backgroundColorHours = ["#edee50", "#69f49c","#aec5ec","#d55fe3","#257aa3"];
                    var labelsHours = [hoursCount[0].hora+':00-'+hoursCount[0].hora+':59', hoursCount[1].hora+':00-'+hoursCount[1].hora+':59', hoursCount[2].hora+':00-'+hoursCount[2].hora+':59',
                    hoursCount[3].hora+':00-'+hoursCount[3].hora+':59', hoursCount[4].hora+':00-'+hoursCount[4].hora+':59'];
                    var dataHours = [hoursCount[0].count,hoursCount[1].count,hoursCount[2].count,hoursCount[3].count,hoursCount[4].count];
                }
                else{
                    var backgroundColorHours = ["#69f49c"];
                    var labelsHours = [hoursCount[0].hora+':00-'+hoursCount[0].hora+':59'];
                    var dataHours = [hoursCount[0].count];
                }
                var barchartHours = new Chart(document.getElementById("bar-chart-horizontal"), {
                    type: 'horizontalBar',
                    data: {
                    labels: labelsHours,
                    datasets: [{
                        label: "Quantidade",
                        backgroundColor: backgroundColorHours,
                        data: dataHours
                    }]
                    },
                    options: {
                        onClick: hoursClickEvent,
                    scales: {
                        xAxes: [{
                            ticks: {
                                min: 0 // Edit the value according to what you need
                            }
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    },
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'Principais horários dos acidentes'
                    }
                    }
                });
                function hoursClickEvent(event, array){
                    var choosen = array[0]._index;
                    var element = document.getElementById("hoursAccident");


                    if(element.value == hoursCount[choosen].hora){ //If user selects a filter and diselects it we take off gray and diselect the filter
                        if(this.previousBackgroundColorHours){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionHours] = this.previousBackgroundColorHours;
                             element.value = null;
                        }
                    }

                    else{
                        //Create new option for selected Hour
                        var opt = document.createElement('option');
                        opt.value = hoursCount[choosen].hora;
                        opt.innerHTML = hoursCount[choosen].hora;
                        element.appendChild(opt);
                        element.value = hoursCount[choosen].hora;

                        var elementIndex = array[0]._index;
                        if(this.previousBackgroundColorHours){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionHours] = this.previousBackgroundColorHours; //Swap old selected to previous color
                        }
                        this.previousBackgroundColorHours = this.data.datasets[0].backgroundColor[elementIndex];
                        this.previousBackgroundPositionHours = elementIndex;
                        this.data.datasets[0].backgroundColor[elementIndex] = 'gray';
                    }
                    this.update();
                }
            #chartBrs
            canvas(id="polar-chart")
            script.
                var brsAccidents = !{JSON.stringify(brsData)};               
                var brsCount = brsAccidents.rows;
                if(brsAccidents.rowCount > 1){
                    var backgroundColorBrs = ["#9b2948", "#ff7251","#ffca7b","#ffcd74","#ffedbf", "yellow", "orange", "blue", "gold", "brown"];//https://www.color-hex.com/color-palette/1499 Palette Brs
                    var labelsBrs = ['BR-' + brsCount[0].br, 'BR-' + brsCount[1].br, 'BR-' + brsCount[2].br, 'BR-' + brsCount[3].br, 'BR-' + brsCount[4].br, 'BR-' + brsCount[5].br, 'BR-' + brsCount[6].br, 'BR-' + brsCount[7].br, 'BR-' + brsCount[8].br, 'BR-' + brsCount[9].br];
                    var dataBrs = [brsCount[0].count, brsCount[1].count, brsCount[2].count, brsCount[3].count, brsCount[4].count, brsCount[5].count, brsCount[6].count, brsCount[7].count, brsCount[8].count, brsCount[9].count];
                }
                else{
                    var backgroundColorBrs = ["#9b2948"];
                    var labelsBrs = ['BR-' + brsCount[0].br];
                    var dataBrs = [brsCount[0].count];
                }
                var chartBrs = new Chart(document.getElementById("polar-chart"), {
                    type: 'polarArea',
                    data: {
                    labels: labelsBrs,
                    datasets: [
                        {
                        label: "Quantidade:",
                        backgroundColor: backgroundColorBrs, 
                        data: dataBrs
                        }
                    ]
                    },
                    options: {
                        onClick: brsClickEvent,
                    title: {
                        display: true,
                        text: 'BRs com maior número de acidentes'
                    }
                    }
                });
                function brsClickEvent(event, array){
                    var choosen = array[0]._index;
                    var element = document.getElementById("brsAccident");

                    if(element.value == brsCount[choosen].br){ //If user selects a filter and diselects it we take off gray and diselect the filter
                        if(this.previousBackgroundColorBrs){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionBrs] = this.previousBackgroundColorBrs;
                             element.value = null;
                        }
                    }
                    
                    else{
                        //Create new option for selected BR
                        var opt = document.createElement('option');
                        opt.value = brsCount[choosen].br;
                        opt.innerHTML = brsCount[choosen].br;
                        element.appendChild(opt);
                        element.value = brsCount[choosen].br;

                        var elementIndex = array[0]._index;
                        if(this.previousBackgroundColorBrs){
                            this.data.datasets[0].backgroundColor[this.previousBackgroundPositionBrs] = this.previousBackgroundColorBrs; //Swap old selected to previous color
                        }
                        this.previousBackgroundColorBrs = this.data.datasets[0].backgroundColor[elementIndex];
                        this.previousBackgroundPositionBrs = elementIndex;
                        this.data.datasets[0].backgroundColor[elementIndex] = 'gray';
                    }
                    this.update();
                }
            #chartDeaths
                canvas(id="bar-chart-horizontal-classification")
                script.
                    var classAccidents = !{JSON.stringify(classData)};               
                    var classCount = classAccidents.rows;
                    var classColor=[];
                    var classLabel=[];

                    classAccidents.rows.forEach(function(entry, index) { //We receive class as number, we converte it back here
                        if(entry.classificacao_acidente == 5){
                            classLabel.push('Sem Vítimas'); 
                            classColor.push("#6cc0e5");
                        }
                        else if(entry.classificacao_acidente == 3){
                            classLabel.push('Com Vítimas Feridas'); 
                            classColor.push("#fbc93d");
                        }
                        else if(entry.classificacao_acidente == 1){
                            classLabel.push('Com Vítimas Fatais'); 
                            classColor.push("#fb4f4f");
                        }
                        else{
                            classLabel.push('Ignorado');
                            classColor.push("#CCC");
                        }
                    });

                    if(classAccidents.rowCount > 1){
                        var backgroundColorClass = classColor;
                        var dataClass = [classCount[0].count, classCount[1].count, classCount[2].count];
                    }
                    else{
                        var backgroundColorClass = ["#fbc93d"];
                        var dataClass = [classCount[0].count];
                    }

                    var barchartClass = new Chart(document.getElementById("bar-chart-horizontal-classification"), {
                        type: 'horizontalBar',
                        data: {
                        labels: classLabel,
                        datasets: [{
                            label: "Quantidade",
                            backgroundColor: backgroundColorClass,
                            data: dataClass
                        }]
                        },
                        options: {
                            onClick: classClickEvent,
                        scales: {
                            xAxes: [{
                                ticks: {
                                    min: 0 // Edit the value according to what you need
                                }
                            }],
                            yAxes: [{
                                stacked: true
                            }]
                        },
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Classificação dos Acidentes'
                        }
                        }
                    });
                    function classClickEvent(event, array){
                        var choosen = array[0]._index;
                        var element = document.getElementById("classAccident");

                        if(element.value == classCount[choosen].classificacao_acidente){ //If user selects a filter and diselects it we take off gray and diselect the filter
                            if(this.previousBackgroundColorClass){
                                this.data.datasets[0].backgroundColor[this.previousBackgroundPositionClass] = this.previousBackgroundColorClass;
                                element.value = null;
                            }
                        }

                        else{
                            element.value = classCount[choosen].classificacao_acidente;
                            var elementIndex = array[0]._index;
                            if(this.previousBackgroundColorClass){
                                this.data.datasets[0].backgroundColor[this.previousBackgroundPositionClass] = this.previousBackgroundColorClass; //Swap old selected to previous color
                            }
                            this.previousBackgroundColorClass = this.data.datasets[0].backgroundColor[elementIndex];
                            this.previousBackgroundPositionClass = elementIndex;
                            this.data.datasets[0].backgroundColor[elementIndex] = 'gray';
                        }
                        this.update();
                    }
        

                
