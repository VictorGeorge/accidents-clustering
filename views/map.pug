doctype html
meta(charset='utf-8')
title Acidentes nas Rodovias Federais
link(rel='stylesheet', href='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css')
link(href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/MarkerCluster.css', rel='stylesheet')
link(rel='stylesheet', href='/stylesheets/clusterpies.css')
script(src='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js', charset='utf-8')
script(src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js')
script(src='http://d3js.org/d3.v3.min.js', charset='utf-8')
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
#map
    script.
        var myData = !{JSON.stringify(jsonData)};
        "use strict"
        //console.log(myData);
        var occurrence = function (array) {
            var result = {};
            if (array instanceof Array) { // Check if input is array.
                array.forEach(function (v, i) {
                    if (!result[v]) { // Initial object property creation.
                        result[v] = [i]; // Create an array for that property.
                    } else { // Same occurrences found.
                        result[v].push(i); // Fill the array.
                    }
                });
            }
            return result;
        };
        var geojson,
            metadata,
            geojsonPath = 'exemploFiltro.geojson',
            propertiesPath = 'properties.json',
            categoryField = 'f3', //This is the fieldname for marker category (used in the pie and legend)
            iconField = '5065', //This is the fieldame for marker icon
            popupFields = ['5065','f2','f3'], //Popup will display these fields
            tileServer = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            tileAttribution = 'Map data: <a href="http://openstreetmap.org">OSM</a>',
            rmax = 30, //Maximum radius for cluster pies
            markerclusters = L.markerClusterGroup({
                maxClusterRadius: 2*rmax,
                chunkedLoading: true,
                chunkInterval: 200, // process markers for a maximum of ~ n milliseconds (then trigger the chunkProgress callback)
                chunkDelay: 50, // at the end of each interval, give n milliseconds back to system/browser
                chunkProgress: null, // progress callback: function(processed, total, elapsed) (e.g. for a progress indicator)'
                iconCreateFunction: defineClusterIcon //this is where the magic happens
                // When bulk adding layers, adds markers in chunks. Means addLayers may not add all the layers in the call, others will be loaded during setTimeouts
            }),
            map = L.map('map').setView([59.95, 10.78], 8);
        //Add basemap
        L.tileLayer(tileServer, {attribution: tileAttribution,  maxZoom: 15}).addTo(map);
        //and the empty markercluster layer
        map.addLayer(markerclusters);

        //Ready to go, load the properties of geojson
        d3.json(propertiesPath, function(error, data) {
            if (!error) {
                metadata = data.properties;
                console.log(metadata);
            } else {
                console.log('Could not load metadata...');
            }
        });

        //Ready to go, load the geojson
        d3.json(geojsonPath, function(error, data) {
            if (!error) {
                geojson = myData; //We now actually just pass the json variable
                //metadata = data.properties;
                //console.log(metadata);
                var markers = L.geoJson(geojson, {
                    pointToLayer: defineFeature,
                    onEachFeature: defineFeaturePopup
                });
                markerclusters.addLayer(markers);
                map.fitBounds(markers.getBounds());
                //map.attributionControl.addAttribution(metadata.attribution);
                renderLegend();
            } else {
                console.log('Could not load data...');
            }
        });

        function defineFeature(feature, latlng) {
            var categoryVal = feature.properties[categoryField],
                iconVal = feature.properties["4"];
            var myClass = 'marker category-'+categoryVal+' icon-'+iconVal;
            var myIcon = L.divIcon({
                className: myClass,
                iconSize:null
            });
            return L.marker(latlng, {icon: myIcon});
        }

        function defineFeaturePopup(feature, layer) {
            var props = feature.properties,
                fields = metadata.fields,

                //here we get the lat, lng to use it on a Maps link
                lat = feature.geometry.coordinates[1];
                lng = feature.geometry.coordinates[0];
                popupContent = '<a href="https://www.google.com/maps/search/?api=1&query='+lat+','+lng+' " target="_blank">Acessar no Maps</a>';
            popupFields.map( function(key) {
                if (props[key]) {
                    var val = props[key],
                        label = fields[key].name;
                    if (fields[key].lookup) {
                        val = fields[key].lookup[val];
                    }
                    popupContent += '<span class="attribute"><span class="label">'+label+':</span> '+val+'</span>';
                }
            });
            popupContent = '<div class="map-popup">'+popupContent+'</div>';
            layer.bindPopup(popupContent,{offset: L.point(1,-2)});
        }

        function defineClusterIcon(cluster) {
            var children = cluster.getAllChildMarkers(),
                n = children.length, //Get number of markers in cluster
                strokeWidth = 1, //Set clusterpie stroke width
                r = rmax-2*strokeWidth-(n<10?12:n<100?8:n<1000?4:0), //Calculate clusterpie radius...
                iconDim = (r+strokeWidth)*2, //...and divIcon dimensions (leaflet really want to know the size)
                data = d3.nest() //Build a dataset for the pie chart
                    .key(function(d) { return d.feature.properties[categoryField]; })
                    .entries(children, d3.map),
                //bake some svg markup
                html = bakeThePie({data: data,
                    valueFunc: function(d){return d.values.length;},
                    strokeWidth: 1,
                    outerRadius: r,
                    innerRadius: r-10,
                    pieClass: 'cluster-pie',
                    pieLabel: n,
                    pieLabelClass: 'marker-cluster-pie-label',
                    pathClassFunc: function(d){return "category-"+d.data.key;},
                    pathTitleFunc: function(d){return metadata.fields[categoryField].lookup[d.data.key]+' ('+d.data.values.length+' accident'+(d.data.values.length!=1?'s':'')+')';}
                }),
                //Create a new divIcon and assign the svg markup to the html property
                myIcon = new L.DivIcon({
                    html: html,
                    className: 'marker-cluster',
                    iconSize: new L.Point(iconDim, iconDim)
                });
            return myIcon;
        }
        /*function that generates a svg markup for the pie chart*/
        function bakeThePie(options) {
            /*data and valueFunc are required*/
            if (!options.data || !options.valueFunc) {
                return '';
            }
            var data = options.data,
                valueFunc = options.valueFunc,
                r = options.outerRadius?options.outerRadius:28, //Default outer radius = 28px
                rInner = options.innerRadius?options.innerRadius:r-10, //Default inner radius = r-10
                strokeWidth = options.strokeWidth?options.strokeWidth:1, //Default stroke is 1
                pathClassFunc = options.pathClassFunc?options.pathClassFunc:function(){return '';}, //Class for each path
                pathTitleFunc = options.pathTitleFunc?options.pathTitleFunc:function(){return '';}, //Title for each path
                pieClass = options.pieClass?options.pieClass:'marker-cluster-pie', //Class for the whole pie
                pieLabel = options.pieLabel?options.pieLabel:d3.sum(data,valueFunc), //Label for the whole pie
                pieLabelClass = options.pieLabelClass?options.pieLabelClass:'marker-cluster-pie-label',//Class for the pie label
                origo = (r+strokeWidth), //Center coordinate
                w = origo*2, //width and height of the svg element
                h = w,
                donut = d3.layout.pie(),
                arc = d3.svg.arc().innerRadius(rInner).outerRadius(r);
            //Create an svg element
            var svg = document.createElementNS(d3.ns.prefix.svg, 'svg');
            //Create the pie chart
            var vis = d3.select(svg)
                .data([data])
                .attr('class', pieClass)
                .attr('width', w)
                .attr('height', h);
            var arcs = vis.selectAll('g.arc')
                .data(donut.value(valueFunc))
                .enter().append('svg:g')
                .attr('class', 'arc')
                .attr('transform', 'translate(' + origo + ',' + origo + ')');
            arcs.append('svg:path')
                .attr('class', pathClassFunc)
                .attr('stroke-width', strokeWidth)
                .attr('d', arc)
                .append('svg:title')
                .text(pathTitleFunc);
            vis.append('text')
                .attr('x',origo)
                .attr('y',origo)
                .attr('class', pieLabelClass)
                .attr('text-anchor', 'middle')
                //.attr('dominant-baseline', 'central')
                /*IE doesn't seem to support dominant-baseline, but setting dy to .3em does the trick*/
                .attr('dy','.3em')
                .text(pieLabel);
            //Return the svg-markup rather than the actual element
            return serializeXmlNode(svg);
        }
        /*Function for generating a legend with the same categories as in the clusterPie*/
        function renderLegend() {
            var data = d3.entries(metadata.fields[categoryField].lookup),
                legenddiv = d3.select('body').append('div')
                    .attr('id','legend');
            var heading = legenddiv.append('div')
                .classed('legendheading', true)
                .text(metadata.fields[categoryField].name);
            var legenditems = legenddiv.selectAll('.legenditem')
                .data(data);
            legenditems
                .enter()
                .append('div')
                .attr('class',function(d){return 'category-'+d.key;})
                .classed({'legenditem': true})
                .text(function(d){return d.value;});
        }
        /*Helper function*/
        function serializeXmlNode(xmlNode) {
            if (typeof window.XMLSerializer != "undefined") {
                return (new window.XMLSerializer()).serializeToString(xmlNode);
            } else if (typeof xmlNode.xml != "undefined") {
                return xmlNode.xml;
            }
            return "";
        }
#container
    form(name='weekDayForm' action='/filter')
        select(name='weekDay' id='weekDay' hidden)
            option(disabled='', selected='', value='') Dia da semana
            option(value='Segunda') Segunda
            option(value='Terça') Terça
            option(value='Quarta') Quarta
            option(value='Quinta') Quinta
            option(value='Sexta') Sexta
            option(value='Sábado') Sábado
            option(value='Domingo') Domingo
        input(type='hidden', value='Submit')
    form(name='yearForm' action='/filter')
        select(name='yearAccident' id='yearAccident' hidden)
            option(disabled='', selected='', value='') Ano
            option(value='2007') 2007
            option(value='2008') 2008
            option(value='2009') 2009
            option(value='2010') 2010
            option(value='2011') 2011
            option(value='2012') 2012
            option(value='2013') 2013
            option(value='2014') 2014
            option(value='2015') 2015
            option(value='2016') 2016
            option(value='2017') 2017
            option(value='2018') 2018
        input(type='hidden', value='Submit')
    #charts 
        #chartWeekDay
            canvas(id="bar-chart")
            script.
                var myData = !{JSON.stringify(jsonData)};
                var myDataFeatures = myData.features;
                var segunda = 0;
                var terca = 0;
                var quarta = 0;
                var quinta = 0;
                var sexta = 0;
                var sabado = 0;
                var domingo = 0;
                for(var i = 0; i < myDataFeatures.length; i++) {
                    var obj = myDataFeatures[i];

                    switch(obj.properties.f4) {
                        case "Segunda": {
                            segunda++;
                            break;
                        }
                        case "Terça": {
                            terca++;
                            break;
                        }
                        case "Quarta": {
                            quarta++;
                            break;
                        }
                        case "Quinta": {
                            quinta++;
                            break;
                        }
                        case "Sexta": {
                            sexta++;
                            break;
                        }
                        case "Sábado": {
                            sabado++;
                            break;
                        }
                        case "Domingo": {
                            domingo++;
                            break;
                        }
                    }
                }
                var bar_chart = new Chart(document.getElementById("bar-chart"), {
                    type: 'bar',
                    data: {
                    labels: ["Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo"],
                    datasets: [
                        {
                        label: "Quantidade de acidentes",
                        backgroundColor: ["#fdb94e", "#f9a852","#f69653","#f38654","#f07654", "#ed6856", "#ef5956"],
                        data: [segunda,terca,quarta,quinta,sexta, sabado, domingo]
                        }
                    ]
                    },
                    options: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Número de acidentes por dia da semana'
                        },
                        maintainAspectRatio: false,
                        onClick: weekChartClickEvent,
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                });
                function weekChartClickEvent(event, array){
                    var choosen = array[0]._view.label; //we have the name of bar clicked, use to filter
                    var element = document.getElementById("weekDay");
                    element.value = choosen;
                    document.weekDayForm.submit();
                }
        #chartYears
            canvas(id="mixed-chart")
            script.
                var myData = !{JSON.stringify(jsonData)};
                var myDataFeatures = myData.features;
                const yearDataGoes = 2018;
                const yearStarted = 2007;
                var accidentsPerYear = new Array(yearDataGoes - yearStarted).fill(0);
                var years = ['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018']
                for(var i = 0; i < myDataFeatures.length; i++) {
                    var obj = myDataFeatures[i];
                    accidentsPerYear[yearDataGoes - obj.properties.f5]++;
                }
                console.log(accidentsPerYear);
                var line_chart = new Chart(document.getElementById("mixed-chart"), {
                    type: 'line',
                    data: {
                    labels: years,
                    datasets: [
                        {
                        label: "Quantidade de acidentes",
                        //backgroundColor: ["#3e95cd", "#8e5ea2","#3cba9f","#e8c3b9","#c45850", "yellow", "orange", "green", "blue", "grey", "gold", "brown"],
                        borderColor: "#3e95cd",
                        fill:false,
                        data: [accidentsPerYear[11], accidentsPerYear[10], accidentsPerYear[9], accidentsPerYear[8], accidentsPerYear[7], accidentsPerYear[6],
                        accidentsPerYear[5], accidentsPerYear[4], accidentsPerYear[3], accidentsPerYear[2], accidentsPerYear[1], accidentsPerYear[0]]
                        }
                    ]
                    },
                    options: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Acidentes por ano'
                        },
                        maintainAspectRatio: false,
                        onClick: yearchartClickEvent,
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero:true
                                }
                            }]
                        }
                    }
                });

                function yearchartClickEvent(event, array){
                    var choosen = years[array[0]._index]; //index have info of Year index on array
                    var element = document.getElementById("yearAccident");
                    element.value = choosen;
                    document.yearForm.submit();
                }
        #chartCauses
            canvas(id="pie-chart")
            script.
                var causesAccidents = !{JSON.stringify(causesData)};                
                var causesCount = causesAccidents.rows;
                //console.log(causesCount);
                var piechartCauses = new Chart(document.getElementById("pie-chart"), {
                    type: 'pie',
                    data: {
                    labels: [causesCount[0].causa_acidente, causesCount[1].causa_acidente, causesCount[2].causa_acidente, causesCount[3].causa_acidente, causesCount[4].causa_acidente],
                    datasets: [{
                        label: "Causas",
                        backgroundColor: ["#ef4947", "#33b9e1","#1a92c0","#006c9f","#003254"],
                        data: [causesCount[0].count,causesCount[1].count,causesCount[2].count,causesCount[3].count,causesCount[4].count]
                    }]
                    },
                    options: {
                    title: {
                        display: true,
                        text: 'Principais causas dos acidentes'
                    }
                    }
                });  
        #chartHours
            canvas(id="bar-chart-horizontal")
            script.
                var hoursAccidents = !{JSON.stringify(hoursData)};               
                var hoursCount = hoursAccidents.rows;
                var piechartHours = new Chart(document.getElementById("bar-chart-horizontal"), {
                    type: 'horizontalBar',
                    data: {
                    labels: [hoursCount[0].date_part+':00-'+hoursCount[0].date_part+':59', hoursCount[1].date_part+':00-'+hoursCount[1].date_part+':59', hoursCount[2].date_part+':00-'+hoursCount[2].date_part+':59',
                    hoursCount[3].date_part+':00-'+hoursCount[3].date_part+':59', hoursCount[4].date_part+':00-'+hoursCount[4].date_part+':59'],
                    datasets: [{
                        label: "Horários",
                        backgroundColor: ["#edee50", "#69f49c","#aec5ec","#d55fe3","#257aa3"],
                        data: [hoursCount[0].count,hoursCount[1].count,hoursCount[2].count,hoursCount[3].count,hoursCount[4].count]
                    }]
                    },
                    options: {
                    scales: {
                        xAxes: [{
                            ticks: {
                                min: 0 // Edit the value according to what you need
                            }
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    },
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'Principais horários dos acidentes'
                    }
                    }
                }); 
        

                
